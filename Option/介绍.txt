在 Go 语言中，我们经常需要定义结构体，并通过构造函数初始化它们。然而，Go 不支持默认参数，如果一个结构体有很多可选参数，我们会面临以下问题：
    1.构造函数参数过长，调用时不够直观。
    2.需要维护多个 NewXXX 函数，扩展性较差。
    3.代码可读性降低。

为了解决这个问题，Golang 社区广泛采用 Option 模式，让我们可以优雅地管理可选参数。本文将详细讲解 Option 模式的 原理、实现方式、对比分析及最佳实践。

什么是 Option 模式？
    Option 模式是一种 构造函数参数管理方式，它利用 函数式编程 或 结构体配置 来提供灵活的参数设置方式。

在 Go 语言中，Option 模式主要有 两种实现方式：
    1.Functional Options（函数选项模式）✅ 推荐
    2.Struct Options（结构体选项模式）
